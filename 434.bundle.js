"use strict";(self.webpackChunkrecipe_viewer=self.webpackChunkrecipe_viewer||[]).push([[434],{434:(e,s,t)=>{t.d(s,{default:()=>n});var i=t(548),r=t(258);const n=function(e){return{eventBus:e,commandPatterns:null,init(){this.commandPatterns=this.createCommandPatterns(),console.log("Timer command interface initialized")},createCommandPatterns(){return[{patterns:[/create\s+(?:a\s+)?timer\s+for\s+(\d+)\s+(?:minute|minutes|min|mins|m|second|seconds|sec|secs|s)/i,/set\s+(?:a\s+)?timer\s+for\s+(\d+)\s+(?:minute|minutes|min|mins|m|second|seconds|sec|secs|s)/i,/start\s+(?:a\s+)?timer\s+for\s+(\d+)\s+(?:minute|minutes|min|mins|m|second|seconds|sec|secs|s)/i],action:e=>{const s=parseInt(e[1],10),t=e[2]?e[2].toLowerCase():"minute";let i=s;t.startsWith("m")&&(i=60*s),this.eventBus.publish("timer:request:create",{name:`${s} ${t} timer`,duration:i,autoStart:!0})}},{patterns:[/create\s+(?:a\s+)?(\w+)\s+timer\s+for\s+(\d+)\s+(?:minute|minutes|min|mins|m|second|seconds|sec|secs|s)/i,/set\s+(?:a\s+)?(\w+)\s+timer\s+for\s+(\d+)\s+(?:minute|minutes|min|mins|m|second|seconds|sec|secs|s)/i,/start\s+(?:a\s+)?(\w+)\s+timer\s+for\s+(\d+)\s+(?:minute|minutes|min|mins|m|second|seconds|sec|secs|s)/i],action:e=>{const s=e[1],t=parseInt(e[2],10);let i=t;(e[3]?e[3].toLowerCase():"minute").startsWith("m")&&(i=60*t),this.eventBus.publish("timer:request:create",{name:`${s} timer`,duration:i,autoStart:!0})}},{patterns:[/set\s+(?:a\s+)?timer\s+(?:for|to)\s+(.+)/i,/create\s+(?:a\s+)?timer\s+(?:for|to)\s+(.+)/i,/start\s+(?:a\s+)?timer\s+(?:for|to)\s+(.+)/i,/timer\s+(?:for|to)\s+(.+)/i],action:e=>{const s=e[1],t=(0,r.C$)(s);if(t>0){const i=(0,r.Kk)(s);return this.eventBus.publish("timer:request:create",{name:i,duration:t,autoStart:!0,metadata:{stepText:s,matchIndex:s.indexOf(e[0])}}),!0}return!1}},{patterns:[/start\s+timer/i,/resume\s+timer/i],action:()=>{this.eventBus.publish("timer:request:start:all",null)}},{patterns:[/pause\s+timer/i,/stop\s+timer/i],action:()=>{this.eventBus.publish("timer:request:pause:all",null)}},{patterns:[/reset\s+timer/i,/restart\s+timer/i],action:()=>{this.eventBus.publish("timer:request:reset:all",null)}},{patterns:[/cancel\s+timer/i,/clear\s+timer/i,/remove\s+timer/i,/close\s+timer/i],action:()=>{this.eventBus.publish("timer:request:clear:all",null)}},{patterns:[/start\s+(?:the\s+)?(\w+)(?:\s+timer)?/i,/resume\s+(?:the\s+)?(\w+)(?:\s+timer)?/i,/start\s+(?:the\s+)?(\w+\s+\w+)(?:\s+timer)?/i,/resume\s+(?:the\s+)?(\w+\s+\w+)(?:\s+timer)?/i,/start\s+(?:the\s+)?(\w+\s+\w+\s+\w+)(?:\s+timer)?/i,/resume\s+(?:the\s+)?(\w+\s+\w+\s+\w+)(?:\s+timer)?/i,/start\s+(?:the\s+)?(.+?)\s+timer/i,/resume\s+(?:the\s+)?(.+?)\s+timer/i],action:e=>{const s=e[1];if(console.log(`Attempting to start timer with name: "${s}"`),this.eventBus.publish("timer:request:start:byName",{name:s}),!s.toLowerCase().endsWith("timer")){const e=`${s} timer`;console.log(`Also trying with 'timer' appended: "${e}"`),this.eventBus.publish("timer:request:start:byName",{name:e})}this._logAvailableTimers()}},{patterns:[/pause\s+(?:the\s+)?(\w+)(?:\s+timer)?/i,/stop\s+(?:the\s+)?(\w+)(?:\s+timer)?/i,/pause\s+(?:the\s+)?(\w+\s+\w+)(?:\s+timer)?/i,/stop\s+(?:the\s+)?(\w+\s+\w+)(?:\s+timer)?/i,/pause\s+(?:the\s+)?(\w+\s+\w+\s+\w+)(?:\s+timer)?/i,/stop\s+(?:the\s+)?(\w+\s+\w+\s+\w+)(?:\s+timer)?/i,/pause\s+(?:the\s+)?(.+?)\s+timer/i,/stop\s+(?:the\s+)?(.+?)\s+timer/i],action:e=>{const s=e[1];console.log(`Attempting to pause/stop timer with name: "${s}"`),this.eventBus.publish("timer:request:pause:byName",{name:s}),s.toLowerCase().endsWith("timer")||this.eventBus.publish("timer:request:pause:byName",{name:`${s} timer`})}},{patterns:[/reset\s+(?:the\s+)?(\w+)(?:\s+timer)?/i,/restart\s+(?:the\s+)?(\w+)(?:\s+timer)?/i,/reset\s+(?:the\s+)?(\w+\s+\w+)(?:\s+timer)?/i,/restart\s+(?:the\s+)?(\w+\s+\w+)(?:\s+timer)?/i,/reset\s+(?:the\s+)?(\w+\s+\w+\s+\w+)(?:\s+timer)?/i,/restart\s+(?:the\s+)?(\w+\s+\w+\s+\w+)(?:\s+timer)?/i,/reset\s+(?:the\s+)?(.+?)\s+timer/i,/restart\s+(?:the\s+)?(.+?)\s+timer/i],action:e=>{const s=e[1];if(console.log(`Attempting to reset/restart timer with name: "${s}"`),this.eventBus.publish("timer:request:reset:byName",{name:s}),!s.toLowerCase().endsWith("timer")){const e=`${s} timer`;console.log(`Also trying with 'timer' appended: "${e}"`),this.eventBus.publish("timer:request:reset:byName",{name:e})}this._logAvailableTimers()}},{patterns:[/cancel\s+(?:the\s+)?(\w+)(?:\s+timer)?/i,/clear\s+(?:the\s+)?(\w+)(?:\s+timer)?/i,/remove\s+(?:the\s+)?(\w+)(?:\s+timer)?/i,/close\s+(?:the\s+)?(\w+)(?:\s+timer)?/i,/cancel\s+(?:the\s+)?(\w+\s+\w+)(?:\s+timer)?/i,/clear\s+(?:the\s+)?(\w+\s+\w+)(?:\s+timer)?/i,/remove\s+(?:the\s+)?(\w+\s+\w+)(?:\s+timer)?/i,/close\s+(?:the\s+)?(\w+\s+\w+)(?:\s+timer)?/i,/cancel\s+(?:the\s+)?(\w+\s+\w+\s+\w+)(?:\s+timer)?/i,/clear\s+(?:the\s+)?(\w+\s+\w+\s+\w+)(?:\s+timer)?/i,/remove\s+(?:the\s+)?(\w+\s+\w+\s+\w+)(?:\s+timer)?/i,/close\s+(?:the\s+)?(\w+\s+\w+\s+\w+)(?:\s+timer)?/i,/cancel\s+(?:the\s+)?(.+?)\s+timer/i,/clear\s+(?:the\s+)?(.+?)\s+timer/i,/remove\s+(?:the\s+)?(.+?)\s+timer/i,/close\s+(?:the\s+)?(.+?)\s+timer/i],action:e=>{const s=e[1];if(console.log(`Attempting to cancel/clear/remove/close timer with name: "${s}"`),this.eventBus.publish("timer:request:remove:byName",{name:s}),!s.toLowerCase().endsWith("timer")){const e=`${s} timer`;console.log(`Also trying with 'timer' appended: "${e}"`),this.eventBus.publish("timer:request:remove:byName",{name:e})}this._logAvailableTimers()}}]},_logAvailableTimers(){console.log("Checking available timers for voice command matching...");try{if(window.timerModule&&"function"==typeof window.timerModule.getAllTimers){const e=window.timerModule.getAllTimers();return void console.log("Available timers:",e.map((e=>({id:e.id,name:e.name,status:e.status,isRunning:e.isRunning}))))}this.eventBus.publish("timer:request:list:all",{callback:e=>{Array.isArray(e)&&e.length>0?console.log("Available timers via event:",e):console.log("No active timers available or timer list is empty")}})}catch(e){console.error("Error accessing timers:",e)}},processCommand(e){if(!e)return!1;const s=(0,i.mO)(e);console.log(`Timer command interface processing command: "${s}"`),s.match(/(close|cancel|clear|remove)\s+/i)&&console.log(`Detected close/cancel/remove command: "${s}"`);const t=s.match(/start\s+(?:the\s+)?(.+?)(?:\s+timer)?/i);if(t){const e=t[1];console.log(`Direct match for starting timer: "${e}"`),console.log(`Publishing event timer:request:start:byName with name: "${e}"`),this.eventBus.publish("timer:request:start:byName",{name:e});const s=e.split(" ")[0];if(s&&s!==e&&(console.log(`Also trying with just first word: "${s}"`),this.eventBus.publish("timer:request:start:byName",{name:s})),!e.toLowerCase().endsWith("timer")){const s=`${e} timer`;console.log(`Also trying with 'timer' appended: "${s}"`),this.eventBus.publish("timer:request:start:byName",{name:s})}return this._logAvailableTimers(),!0}const n=s.match(/(pause|stop)\s+(?:the\s+)?(.+?)(?:\s+timer)?/i);if(n){const e=n[2];console.log(`Direct match for pausing timer: "${e}"`),console.log(`Publishing event timer:request:pause:byName with name: "${e}"`),this.eventBus.publish("timer:request:pause:byName",{name:e});const s=e.split(" ")[0];if(s&&s!==e&&(console.log(`Also trying with just first word: "${s}"`),this.eventBus.publish("timer:request:pause:byName",{name:s})),!e.toLowerCase().endsWith("timer")){const s=`${e} timer`;console.log(`Also trying with 'timer' appended: "${s}"`),this.eventBus.publish("timer:request:pause:byName",{name:s})}return this._logAvailableTimers(),!0}const m=s.match(/(reset|restart)\s+(?:the\s+)?(.+?)(?:\s+timer)?/i);if(m){const e=m[2];console.log(`Direct match for resetting timer: "${e}"`),console.log(`Publishing event timer:request:reset:byName with name: "${e}"`),this.eventBus.publish("timer:request:reset:byName",{name:e});const s=e.split(" ")[0];if(s&&s!==e&&(console.log(`Also trying with just first word: "${s}"`),this.eventBus.publish("timer:request:reset:byName",{name:s})),!e.toLowerCase().endsWith("timer")){const s=`${e} timer`;console.log(`Also trying with 'timer' appended: "${s}"`),this.eventBus.publish("timer:request:reset:byName",{name:s})}return this._logAvailableTimers(),!0}const o=s.match(/(close|cancel|clear|remove)\s+(?:the\s+)?(.+?)(?:\s+timer)?/i);if(o){const e=o[2];console.log(`Direct match for closing timer: "${e}"`),console.log(`Publishing event timer:request:remove:byName with name: "${e}"`),this.eventBus.publish("timer:request:remove:byName",{name:e});const s=e.split(" ")[0];if(s&&s!==e&&(console.log(`Also trying with just first word: "${s}"`),this.eventBus.publish("timer:request:remove:byName",{name:s})),!e.toLowerCase().endsWith("timer")){const s=`${e} timer`;console.log(`Also trying with 'timer' appended: "${s}"`),this.eventBus.publish("timer:request:remove:byName",{name:s})}return this._logAvailableTimers(),!0}if(s.match(/^start\s+timer$/i))return console.log('Generic "start timer" command detected - starting all inactive timers'),this.eventBus.publish("timer:request:start:all",null),this._logAvailableTimers(),!0;const a=(0,r.C$)(s);if(a>0){const e=(0,r.Kk)(s);return console.log(`Extracted duration ${a}s, creating timer with label: "${e}"`),this.eventBus.publish("timer:request:create",{name:e,duration:a,autoStart:!0,metadata:{stepText:s,matchIndex:0}}),!0}for(const e of this.commandPatterns)for(const t of e.patterns){const i=s.match(t);if(i)return console.log(`Timer command matched pattern: ${t}`),e.action(i),!0}return console.log("No timer command pattern matched"),!1}}}}}]);